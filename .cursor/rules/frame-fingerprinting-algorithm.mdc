---
description: Technical specification for Python construct analysis and usage tracking system
globs: src/uzpy/analyzer/**,src/uzpy/parser/**,src/uzpy/modifier/**
alwaysApply: false
---


# frame-fingerprinting-algorithm

## Core Components

The frame fingerprinting system consists of three main components that work together to analyze and track code constructs:

### Construct Extraction (Importance: 95)
Implemented in the TreeSitterParser class, this component:
- Uses Tree-sitter queries to identify Python constructs (functions, classes, methods)
- Extracts associated docstrings and metadata
- Handles incremental parsing with error recovery

### Usage Analysis (Importance: 90)
The HybridAnalyzer implements a dual-engine approach:
- Combines Rope and Jedi analyzers for comprehensive reference detection
- Employs confidence scoring to resolve conflicting results
- Maintains accurate scope resolution using AST and symtable integration

### Reference Management (Importance: 85)
Uses specialized data structures for tracking code relationships:
- Hybrid inverted indices for quick symbol lookups
- Graph representations for complex dependency queries
- Cached AST storage with timestamp-based invalidation

## Relevant File Paths
- `src/uzpy/parser/tree_sitter_parser.py`
- `src/uzpy/analyzer/hybrid_analyzer.py`
- `src/uzpy/analyzer/jedi_analyzer.py`
- `src/uzpy/analyzer/rope_analyzer.py`

$END$

 If you're using this file in context, clearly say in italics in one small line that "Context added by Giga frame-fingerprinting-algorithm".