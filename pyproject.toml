# this_file: pyproject.toml
#==============================================================================
# UZPY PACKAGE CONFIGURATION
# This pyproject.toml defines the package metadata, dependencies, build system,
# and development environment for the uzpy package.
#==============================================================================

#------------------------------------------------------------------------------
# PROJECT METADATA
# Core package information used by PyPI and package managers.
#------------------------------------------------------------------------------
[project]
name = 'uzpy' # Package name on PyPI
description = 'A tool to track where Python constructs are used and update docstrings' # Short description
readme = 'README.md' # Path to README file
requires-python = '>=3.10' # Minimum Python version
keywords = [
    'documentation',
    'code-analysis',
    'ast',
    'tree-sitter',
    'docstrings',
    'usage-tracking',
] # Keywords for PyPI search
dynamic = ["version"] # Fields set dynamically at build time

# PyPI classifiers for package categorization
classifiers = [
    'Development Status :: 4 - Beta', # Package maturity level
    'Programming Language :: Python',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: Implementation :: CPython',
    'Programming Language :: Python :: Implementation :: PyPy',
    'Operating System :: OS Independent',
    'License :: OSI Approved :: MIT License',
    'Intended Audience :: Developers',
]

dependencies = [
    # Core dependencies  
    "tree-sitter>=0.20.0",
    "tree-sitter-python>=0.20.0",
    "libcst>=1.0.0",
    "rich>=13.0.0",
    "loguru>=0.7.0",
    "pathspec>=0.11.0",
    
    # Traditional analyzers (reliable fallbacks)
    "rope>=1.7.0",                   # Robust refactoring and analysis
    "jedi>=0.19.0",                  # Python completion and analysis
    
    # Modern analysis tools
    "pyright>=1.1.370",              # Fast cross-file analysis
    "ast-grep-py>=0.21.0",           # Structural search (Python bindings)
    "diskcache>=5.6.3",              # Persistent caching
    
    # Modern CLI
    "typer>=0.12.0",                 # Modern CLI framework
    "pydantic-settings>=2.3.0",      # Configuration management
    "watchdog>=4.0.1",               # File monitoring
    
    # Analytics & Storage  
    "duckdb>=0.10.0",                # Fast analytical queries
    "sqlalchemy>=2.0.30",            # ORM for structured storage
    "msgpack>=1.0.8",                # Fast serialization
]

# Author information
[[project.authors]]
name = 'Adam Twardoch'
email = 'adam+github@twardoch.com'

# License information
[project.license]
text = 'MIT'

# Project URLs
[project.urls]
Documentation = 'https://github.com/twardoch/uzpy#readme'
Issues = 'https://github.com/twardoch/uzpy/issues'
Source = 'https://github.com/twardoch/uzpy'

#------------------------------------------------------------------------------
# OPTIONAL DEPENDENCIES
# Additional dependencies for optional features, development, and testing.
#------------------------------------------------------------------------------
[project.optional-dependencies]

# Development tools
dev = [
    'pre-commit>=4.1.0',
    'ruff>=0.9.7', # Retaining ruff here for linting/formatting, also used as CLI tool
    'mypy>=1.15.0',
    'absolufy-imports>=0.3.1',
    'pyupgrade>=3.19.1',
    'isort>=6.0.1', # isort is often run via pre-commit or directly
    'autoflake>=2.0.0',
]

# Testing tools and frameworks
test = [
    'pytest>=8.3.4',
    'pytest-cov>=6.0.0',
    'pytest-xdist>=3.6.1',
    'pytest-benchmark[histogram]>=5.1.0',
    'pytest-asyncio>=0.25.3',
    'coverage[toml]>=7.6.12',
]

docs = [
    "sphinx>=7.2.6",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=2.0.0",
    "myst-parser>=3.0.0",
]

# Advanced features (optional, to be added if implemented later)
advanced = [
    # "pygls>=1.3.0",
    # "ray>=2.9.0",
    # "duckdb>=0.10.0",
    # "sqlalchemy>=2.0.30",
    # "msgpack>=1.0.8",
]

# All optional dependencies combined
all = [
    "uzpy[dev]",
    "uzpy[test]",
    "uzpy[docs]",
    # "uzpy[advanced]", # Will add back if advanced features are implemented
]

#------------------------------------------------------------------------------
# COMMAND-LINE SCRIPTS
# Entry points for command-line executables installed with the package.
#------------------------------------------------------------------------------
[project.scripts]
uzpy = "uzpy.__main__:cli" # Existing CLI entry point
uzpy-modern = "uzpy.cli_modern:app" # New entry point for Typer CLI

#------------------------------------------------------------------------------
# BUILD SYSTEM CONFIGURATION
# Defines the tools required to build the package and the build backend.
#------------------------------------------------------------------------------
[build-system]
requires = [
    'hatchling>=1.27.0',
    'hatch-vcs>=0.4.0',
]
build-backend = 'hatchling.build'


#------------------------------------------------------------------------------
# HATCH BUILD CONFIGURATION
# Configures the build process, specifying which packages to include and
# how to handle versioning.
#------------------------------------------------------------------------------
[tool.hatch.build]
include = [
    "src/uzpy/py.typed",
    "src/uzpy/data/**/*",
]
exclude = ["**/__pycache__", "**/.pytest_cache", "**/.mypy_cache"]

[tool.hatch.build.targets.wheel]
packages = ["src/uzpy"]
reproducible = true

[tool.hatch.build.hooks.vcs]
version-file = "src/uzpy/__version__.py"

[tool.hatch.version]
source = 'vcs'

[tool.hatch.metadata]
allow-direct-references = true


#------------------------------------------------------------------------------
# DEVELOPMENT ENVIRONMENTS

[tool.hatch.envs.default]
features = ['dev', 'test', 'all'] # 'all' will include 'advanced' once populated
dependencies = []

[tool.hatch.envs.default.scripts]
test = 'pytest {args:tests}'
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/uzpy --cov=tests {args:tests}"
type-check = "mypy src/uzpy tests"
lint = ["ruff check src/uzpy tests", "ruff format --respect-gitignore src/uzpy tests"]
fmt = ["ruff format --respect-gitignore src/uzpy tests", "ruff check --fix src/uzpy tests"]
fix = ["ruff check --fix --unsafe-fixes src/uzpy tests", "ruff format --respect-gitignore src/uzpy tests"]

[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11", "3.12"]

#------------------------------------------------------------------------------
# SPECIALIZED ENVIRONMENTS

[tool.hatch.envs.lint]
detached = true
features = ['dev']

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/uzpy tests}"
style = ["ruff check {args:.}", "ruff format --respect-gitignore {args:.}"]
fmt = ["ruff format --respect-gitignore {args:.}", "ruff check --fix {args:.}"]
fix = ["ruff check --fix --unsafe-fixes {args:.}", "ruff format --respect-gitignore {args:.}"]
all = ["style", "typing", "fix"]

[tool.hatch.envs.test]
features = ['test']

[tool.hatch.envs.test.scripts]
test = "python -m pytest -n auto {args:tests}"
test-cov = "python -m pytest -n auto --cov-report=term-missing --cov-config=pyproject.toml --cov=src/uzpy --cov=tests {args:tests}"
bench = "python -m pytest -v -p no:briefcase tests/test_benchmark.py --benchmark-only"
bench-save = "python -m pytest -v -p no:briefcase tests/test_benchmark.py --benchmark-only --benchmark-json=benchmark/results.json"

[tool.hatch.envs.docs]
features = ['docs']

[tool.hatch.envs.docs.scripts]
build = "sphinx-build -b html docs/source docs/build"

[tool.hatch.envs.ci]
features = ['test']

[tool.hatch.envs.ci.scripts]
test = "pytest --cov=src/uzpy --cov-report=xml"

#------------------------------------------------------------------------------
# CODE QUALITY TOOLS

#------------------------------------------------------------------------------
# COVERAGE CONFIGURATION

[tool.coverage.paths]
uzpy = ["src/uzpy", "*/uzpy/src/uzpy"]
tests = ["tests", "*/uzpy/tests"]

[tool.coverage.report]
exclude_lines = [
    'no cov',
    'if __name__ == .__main__.:',
    'if TYPE_CHECKING:',
    'pass',
    'raise NotImplementedError',
    'raise ImportError',
    'except ImportError',
    'except KeyError',
    'except AttributeError',
    'except NotImplementedError',
]

[tool.coverage.run]
source_pkgs = ["uzpy", "tests"]
branch = true
parallel = true
omit = [
    "src/uzpy/__about__.py", # Assuming this might be added for version via hatch-vcs
    "src/uzpy/__version__.py", # Version file, typically not covered
]

#------------------------------------------------------------------------------
# MYPY CONFIGURATION

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

#------------------------------------------------------------------------------
# PYTEST CONFIGURATION

[tool.pytest.ini_options]
addopts = "-v --durations=10 -p no:briefcase" # Added -v for verbosity
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
console_output_style = "progress"
filterwarnings = ["ignore::DeprecationWarning", "ignore::UserWarning"]
log_cli = true
log_cli_level = "INFO"
markers = [
    "benchmark: marks tests as benchmarks (select with '-m benchmark')",
    "unit: mark a test as a unit test",
    "integration: mark a test as an integration test",
    "permutation: tests for permutation functionality",
    "parameter: tests for parameter parsing",
    "prompt: tests for prompt parsing",
]
norecursedirs = [
    ".*", "build", "dist", "venv", "__pycache__", "*.egg-info", "_private",
    ".git", ".hg", ".tox", ".nox", ".eggs", "docs", # Common exclusions
]
python_classes = ["Test*"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
testpaths = ["tests"]

[tool.pytest-benchmark]
min_rounds = 100 # Increased for more stable benchmarks
min_time = 0.1
histogram = true
storage = "file" # Ensure benchmark data is stored
save-data = true # Explicitly save data
compare = [
    "min", "max", "mean", "stddev", "median", "iqr", "ops", "rounds",
]

#------------------------------------------------------------------------------
# RUFF CONFIGURATION

[tool.ruff]
target-version = "py310"
line-length = 120 # Standardized line length

[tool.ruff.lint]
select = [
    'A', 'ARG', 'ASYNC', 'B', 'C', 'DTZ', 'E', 'EM', 'F', 'FBT', 'I', 'ICN',
    'ISC', 'LOG', 'N', 'PLC', 'PLE', 'PLR', 'PLW', 'PT', 'PTH', 'PYI', 'RET',
    'RSE', 'RUF', 'S', 'SIM', 'T', 'TCH', 'TID', 'UP', 'W', 'YTT',
]
ignore = [
    'B027', 'C901', 'FBT003', 'PLR0911', 'PLR0912', 'PLR0913', 'PLR0915',
    'PLR1714', 'PLW0603', 'PT013', 'PTH123', 'PYI056', 'S105', 'S106', 'S107',
    'S110', 'SIM102',
    # Added based on common needs or verbosity:
    'S311', # Standard pseudo-random generators are usually fine for non-crypto
    'T201', # Allow print statements, useful for CLI tools / debugging
]
unfixable = [
    'F401', # Unused imports, good to keep manual control
]
exclude = [".git", ".venv", "venv", "dist", "build", "__pycache__", "*.egg-info", ".mypy_cache", ".pytest_cache", "docs"]

[tool.ruff.lint.isort]
known-first-party = ['uzpy']

# flake8-tidy-imports configuration within Ruff
[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = 'all' # Ban all relative imports for consistency

[tool.ruff.lint.per-file-ignores]
'tests/**/*' = [
    'PLR2004', # Magic values in tests
    'S101',    # Assertions in tests
    'TID252',  # Relative imports in tests
    'ARG001',  # Unused function argument (common in test fixtures)
    'FBT001',  # Boolean positional arg (common in test parameters)
    'FBT002',  # Boolean default value (common in test parameters)
]
'src/uzpy/modifier/libcst_modifier.py' = ['N802'] # LibCST visitor methods use CapWords
'src/uzpy/cli_modern.py' = ['FBT001', 'FBT002'] # Typer CLI uses boolean flags
